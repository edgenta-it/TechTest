name: main-branch-pipeline
on:
  push:
    branches:
      - 'main'
jobs:
  run-sonarqube-scan:
    name: Code analyze API and xUnit using SonarQube
    runs-on: [self-hosted, azure]

    steps:
      - uses: actions/checkout@v4
        with:
         fetch-depth: 0
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
         dotnet-version: '6.0.x'
      - name: Install dependencies
        run: dotnet restore
      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            tech-coe-dev/data/technologyone/tech-test SONAR_PROJECT_KEY | SONAR_PROJECT_KEY ;
            tech-coe-dev/data/edgenta-it SONAR_HOST_URL | SONAR_HOST_URL ;
            tech-coe-dev/data/edgenta-it SONAR_TOKEN | SONAR_TOKEN
      - name: Begin SonarQube Scanning
        run: dotnet /home/devopsteam/sonar-scanner/SonarScanner.MSBuild.dll begin /k:${{ env.SONAR_PROJECT_KEY }} /d:sonar.host.url=${{ env.SONAR_HOST_URL }} /d:sonar.login=${{ env.SONAR_TOKEN }} /d:sonar.cs.vstest.reportsPaths="**/*.trx" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"
      - name: Build with dotnet
        run: dotnet build
      - name: Test with dotnet 
        run: dotnet test
        #run: dotnet test ./TechTest/TechTest.csproj --settings coverlet.runsettings --logger:trx
      - name: End SonarQube Scanning
        run: dotnet /home/devopsteam/sonar-scanner/SonarScanner.MSBuild.dll end /d:sonar.login=${{ env.SONAR_TOKEN }}

  #docker-build-and-push:
  #  name: Docker Build And Push
  #  runs-on: [self-hosted, azure]

  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v2.2.0
  #    - name: Set up Docker Buildx
  #      uses: docker/setup-buildx-action@v1
  #    - name: Import Docker Secrets from Vault
  #      uses: hashicorp/vault-action@v2.4.0
  #      with:
  #        url: ${{ secrets.VAULT_ADDR }}
  #        method: approle
  #        roleId: ${{ secrets.VAULT_ROLE_ID }}
  #        secretId: ${{ secrets.VAULT_SECRET_ID }}
  #        secrets: |
  #          tech-coe-dev/data/edgenta-it DOCKERHUB_USERNAME | DOCKERHUB_USERNAME ;
  #          tech-coe-dev/data/edgenta-it DOCKERHUB_TOKEN | DOCKERHUB_TOKEN
  #    - name: Login to DockerHub
  #      uses: docker/login-action@v1 
  #      with:
  #        username: ${{ env.DOCKERHUB_USERNAME }}
  #        password: ${{ env.DOCKERHUB_TOKEN }}
  #    - name: Build and push
  #      uses: docker/build-push-action@v2
  #      with:
  #        push: true
  #        tags: ${{ env.DOCKERHUB_USERNAME }}/edgenta-api:${{ github.sha }}

  #deploy-app-prod:
  #  name: Deploy App to Prod Azure AKS Cluster
  #  runs-on: [self-hosted, azure]
  #  needs: [docker-build-and-push, run-sonarqube-scan]

  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v2.2.0
  #    - name: Import GPG_PASSPHRASE Secrets from Vault
  #      uses: hashicorp/vault-action@v2.4.0
  #      with:
  #        url: ${{ secrets.VAULT_ADDR }}
  #        method: approle
  #        roleId: ${{ secrets.VAULT_ROLE_ID }}
  #        secretId: ${{ secrets.VAULT_SECRET_ID }}
  #        secrets: |
  #          tech-coe-dev/data/edgenta-it GPG_PASSPHRASE | GPG_PASSPHRASE
  #    - name: Decrypt kube_config file
  #      run: |
  #        gpg --quiet --batch --yes --decrypt --passphrase=${{ env.GPG_PASSPHRASE }} --output ./kube_config/aks-its-app-github-action-sa.yml ./kube_config/aks-its-app-prd-clu02-github-action-sa-kubeconfig.yml.gpg
  #        ls ./kube_config
  #    - name: Extract branch name
  #      shell: bash
  #      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/releases/})"
  #      id: extract_branch
  #    - name: Deploy application to Prod kubernetes cluster
  #      run: |
  #        export KUBECONFIG=./kube_config/aks-its-app-github-action-sa.yml
  #        kubectl -n tech-coe-prod delete deployment edgenta-api-deployment
  #        sed -i "s/<IMAGE_VERSION>/${{ github.sha }}/g" prod-deployment.yml
  #        kubectl -n tech-coe-prod apply -f prod-deployment.yml